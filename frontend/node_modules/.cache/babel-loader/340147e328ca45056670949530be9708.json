{"ast":null,"code":"import _slicedToArray from \"/Users/benja/Library/Mobile Documents/com~apple~CloudDocs/School/Senior/EECS 581/ElectWise/elect-wise/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/benja/Library/Mobile Documents/com~apple~CloudDocs/School/Senior/EECS 581/ElectWise/elect-wise/src/components/Voter/ElectionList.jsx\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ElectionCard from '../Voter/ElectionCard';\nimport '../../styles/ColorScheme.css';\nimport '../../styles/ElectionList.css';\nimport '../../styles/Transitions.css';\nimport logo from '../../assets/logos/logo.png';\nconst propTypes = {\n  elections: PropTypes.array,\n  isLoading: PropTypes.bool,\n  // For when we have backend to talk to\n  onElectionClick: PropTypes.func\n};\nconst defaultProps = {\n  elections: [],\n  isLoading: false,\n  onElectionClick: () => {}\n};\n\nfunction ElectionList(props) {\n  const elections = props.elections,\n        isLoading = props.isLoading,\n        onElectionClick = props.onElectionClick;\n\n  const _useState = useState(\"slide-in-left\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        animation = _useState2[0],\n        setAnimation = _useState2[1];\n\n  if (isLoading) {} // silencing warning on not using this prop for now\n\n\n  function handleElectionClick(election) {\n    setAnimation(\"slide-out-left\");\n    setTimeout(() => onElectionClick(election), 500);\n  }\n\n  function renderElectionCards() {\n    const cards = elections.map(election => {\n      return React.createElement(ElectionCard // onClick={() => onElectionClick(election)}\n      , {\n        onClick: () => handleElectionClick(election),\n        election: election,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      });\n    });\n    return cards;\n  }\n\n  function renderHeader() {\n    return React.createElement(\"div\", {\n      className: \"election-list-header-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"election-list-header-logo-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"election-list-header-logo\",\n      src: logo,\n      alt: \"ElectWise\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"election-list-header-titles-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"election-list-header-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Available Elections\"), React.createElement(\"div\", {\n      className: \"election-list-header-subtitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"These elections are curated using your voting registration information.\")));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"election-list-container \".concat(animation),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, renderHeader(), renderElectionCards());\n}\n\nElectionList.propTypes = propTypes;\nElectionList.defaultProps = defaultProps;\nexport default ElectionList;","map":{"version":3,"sources":["/Users/benja/Library/Mobile Documents/com~apple~CloudDocs/School/Senior/EECS 581/ElectWise/elect-wise/src/components/Voter/ElectionList.jsx"],"names":["React","useState","PropTypes","ElectionCard","logo","propTypes","elections","array","isLoading","bool","onElectionClick","func","defaultProps","ElectionList","props","animation","setAnimation","handleElectionClick","election","setTimeout","renderElectionCards","cards","map","renderHeader"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,YAAP,MAAyB,uBAAzB;AAEA,OAAO,8BAAP;AACA,OAAO,+BAAP;AACA,OAAO,8BAAP;AACA,OAAOC,IAAP,MAAiB,6BAAjB;AAEA,MAAMC,SAAS,GAAG;AACdC,EAAAA,SAAS,EAAEJ,SAAS,CAACK,KADP;AAEdC,EAAAA,SAAS,EAAEN,SAAS,CAACO,IAFP;AAEa;AAC3BC,EAAAA,eAAe,EAAER,SAAS,CAACS;AAHb,CAAlB;AAMA,MAAMC,YAAY,GAAG;AACjBN,EAAAA,SAAS,EAAE,EADM;AAEjBE,EAAAA,SAAS,EAAE,KAFM;AAGjBE,EAAAA,eAAe,EAAE,MAAM,CAAE;AAHR,CAArB;;AAMA,SAASG,YAAT,CAAsBC,KAAtB,EAA6B;AAAA,QAErBR,SAFqB,GAKrBQ,KALqB,CAErBR,SAFqB;AAAA,QAGrBE,SAHqB,GAKrBM,KALqB,CAGrBN,SAHqB;AAAA,QAIrBE,eAJqB,GAKrBI,KALqB,CAIrBJ,eAJqB;;AAAA,oBAOST,QAAQ,CAAC,eAAD,CAPjB;AAAA;AAAA,QAOlBc,SAPkB;AAAA,QAOPC,YAPO;;AASzB,MAAIR,SAAJ,EAAc,CAAE,CATS,CASR;;;AAEjB,WAASS,mBAAT,CAA6BC,QAA7B,EAAuC;AACnCF,IAAAA,YAAY,CAAC,gBAAD,CAAZ;AACAG,IAAAA,UAAU,CAAC,MAAMT,eAAe,CAACQ,QAAD,CAAtB,EAAkC,GAAlC,CAAV;AACH;;AAED,WAASE,mBAAT,GAA+B;AAC3B,UAAMC,KAAK,GAAGf,SAAS,CAACgB,GAAV,CAAcJ,QAAQ,IAAI;AACpC,aACI,oBAAC,YAAD,CACI;AADJ;AAEI,QAAA,OAAO,EAAE,MAAMD,mBAAmB,CAACC,QAAD,CAFtC;AAGI,QAAA,QAAQ,EAAEA,QAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAOH,KARa,CAAd;AASA,WAAOG,KAAP;AACH;;AAED,WAASE,YAAT,GAAwB;AACpB,WACI;AAAK,MAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,qCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,2BAAf;AAA2C,MAAA,GAAG,EAAEnB,IAAhD;AAAsD,MAAA,GAAG,EAAC,WAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,EAII;AAAK,MAAA,SAAS,EAAC,uCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADJ,EAII;AAAK,MAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iFAJJ,CAJJ,CADJ;AAeH;;AAED,SACI;AAAK,IAAA,SAAS,oCAA6BW,SAA7B,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKQ,YAAY,EADjB,EAEKH,mBAAmB,EAFxB,CADJ;AAMH;;AAEDP,YAAY,CAACR,SAAb,GAAyBA,SAAzB;AACAQ,YAAY,CAACD,YAAb,GAA4BA,YAA5B;AACA,eAAeC,YAAf","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport ElectionCard from '../Voter/ElectionCard';\n\nimport '../../styles/ColorScheme.css';\nimport '../../styles/ElectionList.css';\nimport '../../styles/Transitions.css';\nimport logo from '../../assets/logos/logo.png';\n\nconst propTypes = {\n    elections: PropTypes.array,\n    isLoading: PropTypes.bool, // For when we have backend to talk to\n    onElectionClick: PropTypes.func\n};\n\nconst defaultProps = {\n    elections: [],\n    isLoading: false,\n    onElectionClick: () => {}\n};\n\nfunction ElectionList(props) {\n    const {\n        elections,\n        isLoading,\n        onElectionClick\n    } = props;\n\n    const [animation, setAnimation] = useState(\"slide-in-left\");\n\n    if (isLoading){} // silencing warning on not using this prop for now\n\n    function handleElectionClick(election) {\n        setAnimation(\"slide-out-left\");\n        setTimeout(() => onElectionClick(election), 500);\n    }\n\n    function renderElectionCards() {\n        const cards = elections.map(election => {\n            return (\n                <ElectionCard\n                    // onClick={() => onElectionClick(election)}\n                    onClick={() => handleElectionClick(election)}\n                    election={election}\n                />\n            );\n        });\n        return cards;\n    }\n\n    function renderHeader() {\n        return (\n            <div className=\"election-list-header-container\">\n                <div className=\"election-list-header-logo-container\">\n                    <img className=\"election-list-header-logo\" src={logo} alt=\"ElectWise\" />\n                </div>\n                <div className=\"election-list-header-titles-container\">\n                    <div className=\"election-list-header-title\">\n                        Available Elections\n                    </div>\n                    <div className=\"election-list-header-subtitle\">\n                        These elections are curated using your voting registration information.\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className={`election-list-container ${animation}`}>\n            {renderHeader()}\n            {renderElectionCards()}\n        </div>\n    );\n}\n\nElectionList.propTypes = propTypes;\nElectionList.defaultProps = defaultProps;\nexport default ElectionList;"]},"metadata":{},"sourceType":"module"}